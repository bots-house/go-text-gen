// Code generated by go-text-gen (github.com/bots-house/go-text-gen). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.
package {{ .PkgName }}

import (
    "strings"
)

var (
    _ = strings.Replacer{}
)

type {{ .TypeLocaleName }} string 

const (
    {{- range .Bundle.Languages }} 
        {{ . | upper }} {{ $.TypeLocaleName }} = "{{ . }}"
    {{- end }}

    // Default locale 
    Default = {{ .Bundle.Default.Name | upper }}
)

var (
     // List of all locales
    List = []{{ .TypeLocaleName}}{ {{- range $index, $element := .Bundle.Languages }}{{ if $index}}, {{ end }}{{ . | upper }} {{- end }}}
)


type {{ .TypeMessagesName }} struct {
    {{- range .Bundle.Default.Messages }}
        {{- if .IsTemplate }}
            {{ .Key | camel }} func({{ range $index, $element := .Vars }}{{ if $index}}, {{ end }}{{ . | lowerCamel }} string{{end}}) string
        {{- else }}
            {{ .Key | camel }} string
        {{- end }}
    {{- end }}
}

var (
    {{ with $defaultLanguage := .Bundle.Default }}
        {{- range $language := $.Bundle.All }}
            {{ $language.Name }} = Messages{
            {{- range $key := $defaultLanguage.Keys }}
                {{- if $language.Has $key }}
                    {{- with $msg := $language.Get $key }}
                        {{- if $msg.IsTemplate }}
                            {{ $msg.Key | camel }}: func({{ range $index, $element := $msg.Vars }}{{ if $index}}, {{ end }}{{ . | lowerCamel }} string{{end}}) string {
                                const tmpl = {{ printf "%q" $msg.Value }}

                                replacer := strings.NewReplacer(
                                    {{- range $msg.Vars }}
                                        "{{ printf "{%s}" . }}", {{ . | lowerCamel }},
                                    {{- end }}
                                )

                                return replacer.Replace(tmpl)
                            },
                        {{- else }}
                            {{ $msg.Key | camel }}: {{ printf "%q" $msg.Value }},
                        {{- end }}
                    {{- end}}
                {{- else }}
                    {{ $key | camel }}: {{ $defaultLanguage.Name }}.{{ $key | camel }},
                {{- end }}
            {{- end}}
            }
        {{- end }}
    {{- end }}
    registry = map[{{ .TypeLocaleName }}]*{{ .TypeMessagesName }}{
        {{- range .Bundle.Languages }}
            {{ . | upper }}: &{{ . }},
        {{- end }}
    }
)
 
func Get(locale Locale) *Messages {
    messages, ok := registry[locale]
    if !ok {
        return registry[Default]
    }
    return messages
}